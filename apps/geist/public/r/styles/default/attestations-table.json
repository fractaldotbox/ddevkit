{
	"name": "attestations-table",
	"type": "registry:ui",
	"dependencies": ["viem", "wagmi", "@tanstack/react-table"],
	"files": [
		{
			"path": "components/ui/attestations_attestations-table.tsx",
			"content": "import type { ColumnDef } from \"@tanstack/react-table\";\nimport { useMemo } from \"react\";\nimport { type Address, fromBlobs } from \"viem\";\nimport { mainnet } from \"viem/chains\";\nimport { useChainId } from \"wagmi\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { useGetAttestations } from \"@/hooks/eas_use-get-attestations\";\nimport { getEasscanAttestationUrl } from \"@/lib/eas_easscan\";\nimport { truncate } from \"@/lib/utils_hex\";\nimport { AttestationSchemaBadge } from \"./attestation-schema-badge\";\nimport type { AttestationMeta } from \"./attestations\";\nimport { asAttestationMeta } from \"./attestations\";\n\n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\n\n// customize column with url getEasscanSchemaUrl()\n\nexport const columns: ColumnDef<AttestationMeta>[] = [\n\t{\n\t\taccessorKey: \"id\",\n\t\theader: \"UID\",\n\t\tcell: ({ row }) => {\n\t\t\tconst id = row.getValue<string>(\"id\");\n\n\t\t\treturn (\n\t\t\t\t<a\n\t\t\t\t\thref={getEasscanAttestationUrl(\n\t\t\t\t\t\tmainnet.id,\n\t\t\t\t\t\tid,\n\t\t\t\t\t\trow.original.isOffchain,\n\t\t\t\t\t)}\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t>\n\t\t\t\t\t{truncate(id)}\n\t\t\t\t</a>\n\t\t\t);\n\t\t},\n\t},\n\t{\n\t\taccessorKey: \"schemaId\",\n\t\theader: \"Schema\",\n\t\tcell: ({ row }) => {\n\t\t\tconst schemaId = row.getValue<string>(\"schemaId\");\n\t\t\tconst schemaIndex = row.original.schemaIndex;\n\n\t\t\treturn (\n\t\t\t\t<AttestationSchemaBadge\n\t\t\t\t\tchainId={mainnet.id}\n\t\t\t\t\tschemaId={schemaId}\n\t\t\t\t\tschemaIndex={schemaIndex}\n\t\t\t\t/>\n\t\t\t);\n\t\t},\n\t},\n\t{\n\t\taccessorKey: \"from\",\n\t\theader: \"From\",\n\t},\n\n\t{\n\t\taccessorKey: \"to\",\n\t\theader: \"To\",\n\t},\n\t{\n\t\taccessorKey: \"type\",\n\t\theader: \"Type\",\n\t\tcell: ({ row }) => {\n\t\t\tconst isOffchain = row.original.isOffchain;\n\n\t\t\treturn isOffchain ? \"offchain\" : \"onchain\";\n\t\t},\n\t},\n\t{\n\t\taccessorKey: \"ageDisplayed\",\n\t\theader: \"Age\",\n\t},\n];\n\n// https://easscan.org/\nexport const AttestationsTable = ({\n\taddress,\n}: {\n\taddress: Address;\n}) => {\n\tconst chainId = useChainId();\n\tconst { data, isLoading } = useGetAttestations({\n\t\tchainId,\n\t\taddress,\n\t});\n\n\tconst records = useMemo(() => {\n\t\tif (!data?.data) {\n\t\t\treturn [];\n\t\t}\n\t\treturn data?.data.attestations?.map(asAttestationMeta);\n\t}, [data]);\n\n\treturn (\n\t\t<div>\n\t\t\t<DataTable columns={columns} data={records} />\n\t\t</div>\n\t);\n};\n",
			"type": "registry:ui"
		},
		{
			"path": "components/ui/attestations_attestation-schema-badge.tsx",
			"content": "import { Badge } from \"@/components/ui/badge\";\nimport { getEasscanSchemaUrl } from \"@/lib/eas_easscan\";\n\nexport const AttestationSchemaBadge = ({\n\tchainId,\n\tschemaId,\n\tschemaIndex,\n}: { chainId: number; schemaId: string; schemaIndex: string }) => {\n\treturn (\n\t\t<a href={getEasscanSchemaUrl(chainId, schemaId)} target=\"_blank\">\n\t\t\t<Badge>#{schemaIndex}</Badge>\n\t\t</a>\n\t);\n};\n",
			"type": "registry:ui"
		},
		{
			"path": "components/ui/data-table.tsx",
			"content": "import {\n\ttype ColumnDef,\n\ttype SortingState,\n\tflexRender,\n\tgetCoreRowModel,\n\tgetPaginationRowModel,\n\tgetSortedRowModel,\n\tuseReactTable,\n} from \"@tanstack/react-table\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tTable,\n\tTableBody,\n\tTableCell,\n\tTableHead,\n\tTableHeader,\n\tTableRow,\n} from \"@/components/ui/table\";\n\ninterface DataTableProps<TData, TValue> {\n\tcolumns: ColumnDef<TData, TValue>[];\n\tdata: TData[];\n}\n\nexport function DataTable<TData, TValue>({\n\tcolumns,\n\tdata,\n}: DataTableProps<TData, TValue>) {\n\tconst [sorting, setSorting] = useState<SortingState>([]);\n\n\tconst table = useReactTable({\n\t\tdata,\n\t\tcolumns,\n\t\tgetCoreRowModel: getCoreRowModel(),\n\t\tgetPaginationRowModel: getPaginationRowModel(),\n\t\tonSortingChange: setSorting,\n\t\tgetSortedRowModel: getSortedRowModel(),\n\t\tstate: {\n\t\t\tsorting,\n\t\t},\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"rounded-md border\">\n\t\t\t\t<Table>\n\t\t\t\t\t<TableHeader>\n\t\t\t\t\t\t{table.getHeaderGroups().map((headerGroup) => (\n\t\t\t\t\t\t\t<TableRow key={headerGroup.id}>\n\t\t\t\t\t\t\t\t{headerGroup.headers.map((header) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<TableHead key={header.id}>\n\t\t\t\t\t\t\t\t\t\t\t{header.isPlaceholder\n\t\t\t\t\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t\t\t\t\t: flexRender(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\theader.column.columnDef.header,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\theader.getContext(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</TableHeader>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{table.getRowModel().rows?.length ? (\n\t\t\t\t\t\t\ttable.getRowModel().rows.map((row) => (\n\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\tkey={row.id}\n\t\t\t\t\t\t\t\t\tdata-state={row.getIsSelected() && \"selected\"}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{row.getVisibleCells().map((cell) => (\n\t\t\t\t\t\t\t\t\t\t<TableCell key={cell.id}>\n\t\t\t\t\t\t\t\t\t\t\t{flexRender(\n\t\t\t\t\t\t\t\t\t\t\t\tcell.column.columnDef.cell,\n\t\t\t\t\t\t\t\t\t\t\t\tcell.getContext(),\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\tcolSpan={columns.length}\n\t\t\t\t\t\t\t\t\tclassName=\"h-24 text-center\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tNo results.\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</div>\n\t\t\t<div className=\"flex items-center justify-end space-x-2 py-4\">\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tonClick={() => table.previousPage()}\n\t\t\t\t\tdisabled={!table.getCanPreviousPage()}\n\t\t\t\t>\n\t\t\t\t\tPrevious\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tonClick={() => table.nextPage()}\n\t\t\t\t\tdisabled={!table.getCanNextPage()}\n\t\t\t\t>\n\t\t\t\t\tNext\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "hooks/eas_use-get-attestations.ts",
			"content": "import { gql } from \"@geist/graphql\";\nimport type { Attestation } from \"@geist/graphql/eas/graphql\";\nimport { type UseQueryResult, useQuery } from \"@tanstack/react-query\";\nimport { rawRequest, request } from \"graphql-request\";\nimport { type Address, Hex } from \"viem\";\nimport { getEasscanEndpoint } from \"@/lib/eas_easscan\";\n\nconst allAttestationsByQuery = gql(`\n  query allAttestationsBy(\n    $where: AttestationWhereInput\n  ) {\n    attestations(where: $where) {\n      id\n      txid\n      recipient\n      schema {\n        index\n        schemaNames {\n          name\n        }\n      }\n      time\n      isOffchain\n      schemaId\n      attester\n    }\n  }\n`);\n\nexport type UseGetAttestationsParams = {\n\tchainId: number;\n\taddress: Address;\n};\n\nexport type UseGetAttestationsReturnType = UseQueryResult<Attestation[], Error>;\n\nexport const useGetAttestations = ({\n\tchainId,\n\taddress,\n}: UseGetAttestationsParams): UseGetAttestationsReturnType => {\n\t// https://github.com/dotansimha/graphql-code-generator/blob/master/examples/react/tanstack-react-query/src/use-graphql.ts\n\n\tconst results = useQuery({\n\t\tqueryKey: [\"attestations\", chainId, address],\n\t\tqueryFn: async () =>\n\t\t\trawRequest<Attestation[]>(\n\t\t\t\t`${getEasscanEndpoint(chainId)}/graphql`,\n\t\t\t\tallAttestationsByQuery.toString(),\n\t\t\t\t{\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tattester: {\n\t\t\t\t\t\t\tin: [address],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t).then(({ data }) => data),\n\t});\n\n\treturn results;\n};\n",
			"type": "registry:hook"
		},
		{
			"path": "lib/eas_easscan.ts",
			"content": "import type { Address } from \"viem\";\nimport { EAS_CONFIG_BY_CHAIN_ID } from \"./config\";\n\nexport const getEasscanEndpoint = (chainId: number) => {\n\treturn EAS_CONFIG_BY_CHAIN_ID[chainId]?.easscanUrl;\n};\n\nexport const getEasscanAttestationUrl = (\n\tchainId: number,\n\tuid: string,\n\tisOffchain: boolean,\n) => {\n\tif (isOffchain) {\n\t\treturn `${getEasscanEndpoint(chainId)}/offchain/attestation/view/${uid}`;\n\t}\n\treturn `${getEasscanEndpoint(chainId)}`;\n};\n\nexport const getEasscanAddressUrl = (chainId: number, address: Address) => {\n\treturn `${getEasscanEndpoint(chainId)}/address/${address}`;\n};\n\nexport const getEasscanSchemaUrl = (chainId: number, schemaId: string) => {\n\treturn `${getEasscanEndpoint(chainId)}/schema/view/${schemaId}`;\n};\n",
			"type": "registry:lib"
		},
		{
			"path": "lib/utils_hex.ts",
			"content": "import type { Hex } from \"viem\";\n\nexport type GetShortAddressReturnType = string | null;\n\nexport const getShortHex = (\n\thex: Hex,\n\tsectionLength: number = 4,\n): GetShortAddressReturnType => {\n\treturn [hex.slice(0, sectionLength + 2), hex.slice(-sectionLength)].join(\n\t\t\"...\",\n\t);\n};\n\n// TODO\nexport const truncate = (stringToTruncate: string, threshold: number = 15) => {\n\tif (stringToTruncate.length <= threshold) {\n\t\treturn stringToTruncate;\n\t}\n\treturn stringToTruncate.slice(-threshold).concat(\"...\");\n};\n",
			"type": "registry:lib"
		}
	],
	"registryDependencies": [
		"https://ui.shadcn.com/r/styles/default/tooltip.json"
	]
}
