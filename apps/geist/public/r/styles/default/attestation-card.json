{
  "name": "attestation-card",
  "type": "registry:ui",
  "dependencies": [
    "viem",
    "wagmi",
    "@radix-ui/react-label",
    "date-fns"
  ],
  "files": [
    {
      "path": "components/ui/attestations_attestation-card.tsx",
      "content": "import { Label } from \"@radix-ui/react-label\";\nimport { format } from \"date-fns\";\nimport { useMemo } from \"react\";\nimport type { Address, Hex } from \"viem\";\nimport { mainnet } from \"viem/chains\";\nimport { useChainId } from \"wagmi\";\nimport {\n\tCard,\n\tCardContent,\n\tCardDescription,\n\tCardFooter,\n\tCardHeader,\n\tCardTitle,\n} from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useGetAttestationWithUid } from \"@/hooks/eas_use-get-attestation-with-uid.js\";\nimport { getShortHex } from \"@/lib/utils_hex\";\nimport { AttestationSchemaBadge } from \"./attestation-schema-badge\";\nimport type { AttestationMeta, asAttestationMeta } from \"./attestations\";\n\nconst AttestationCardContent = ({\n\tchainId,\n\tattestation,\n}: { chainId: number; attestation: AttestationMeta }) => {\n\tconst { from, to, schemaId, schemaName, schemaIndex } = attestation;\n\tif (!attestation) {\n\t\treturn <Skeleton className=\"w-[100px] h-[20px] rounded-full\" />;\n\t}\n\treturn (\n\t\t<CardContent>\n\t\t\t<div className=\"flex w-full items-center gap-2\">\n\t\t\t\t<div className=\"grid flex-1 auto-rows-min gap-0.5\">\n\t\t\t\t\t<div className=\"text-xs text-muted-foreground\">Schema</div>\n\t\t\t\t\t<div className=\"flex items-center gap-1 text-2xl font-bold tabular-nums leading-none\">\n\t\t\t\t\t\t<AttestationSchemaBadge\n\t\t\t\t\t\t\tchainId={chainId}\n\t\t\t\t\t\t\tschemaId={schemaId}\n\t\t\t\t\t\t\tschemaIndex={schemaIndex}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<div className=\"text-sm font-normal text-muted-foreground\">\n\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal\">{schemaName}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<span className=\"text-sm font-normal text-muted-foreground\">\n\t\t\t\t\t\t\t\t{getShortHex(schemaId as Hex)}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Separator orientation=\"vertical\" className=\"mx-2 h-10 w-px\" />\n\t\t\t\t<div className=\"grid flex-1 auto-rows-min gap-0.5\">\n\t\t\t\t\t<div className=\"text-xs text-muted-foreground\">From</div>\n\t\t\t\t\t<div className=\"flex items-baseline gap-1 text-2xl font-bold tabular-nums leading-none\">\n\t\t\t\t\t\t<span className=\"text-sm font-normal\">{from}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"text-xs text-muted-foreground\">To</div>\n\t\t\t\t\t<div className=\"flex items-baseline gap-1 text-2xl font-bold tabular-nums leading-none\">\n\t\t\t\t\t\t<span className=\"text-sm font-normal\">{to}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<Label></Label>\n\t\t</CardContent>\n\t);\n};\n\nexport const AttestationCardWithMeta = ({\n\tisOffchain,\n\tchainId,\n\tattestation,\n}: {\n\tisOffchain: boolean;\n\tchainId: number;\n\tattestation: AttestationMeta | null;\n}) => {\n\tconst title = `${isOffchain ? \"Offchain \" : \"Onchain\"} Attestation`;\n\n\treturn (\n\t\t<Card>\n\t\t\t{attestation ? (\n\t\t\t\t<CardHeader>\n\t\t\t\t\t<CardTitle>{title}</CardTitle>\n\t\t\t\t\t<CardDescription>\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<div className=\"flex items-baseline \">\n\t\t\t\t\t\t\t\t<span className=\"text-xs font-normal\">UID:</span>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"text-xs text-muted-foreground\">\n\t\t\t\t\t\t\t\t{attestation.id}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<span className=\"text-xs font-normal\">TIMESTAMPS:</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"text-xs text-muted-foreground\">\n\t\t\t\t\t\t\tCreated:{\" \"}\n\t\t\t\t\t\t\t{format(new Date(attestation.time * 1000), \"yyyy/MM/dd HH:MM:ss\")}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</CardDescription>\n\t\t\t\t</CardHeader>\n\t\t\t) : (\n\t\t\t\t<Skeleton className=\"w-[100px] h-[20px] rounded-full\" />\n\t\t\t)}\n\t\t\t<CardContent>\n\t\t\t\t{attestation && (\n\t\t\t\t\t<AttestationCardContent chainId={chainId} attestation={attestation} />\n\t\t\t\t)}\n\t\t\t</CardContent>\n\t\t\t<CardFooter></CardFooter>\n\t\t</Card>\n\t);\n};\n\n// some key fields from https://easscan.org/offchain/attestation/view/0x49dff46654fe740241026c1a717ace9ec439abe26124cd925b0ba1df296433c5\nexport const AttestationCard = ({\n\tisOffchain,\n\tchainId,\n\tattestationUid,\n}: {\n\tisOffchain: boolean;\n\tchainId: number;\n\tattestationUid: string;\n}) => {\n\tconst { data, isSuccess } = useGetAttestationWithUid({\n\t\tchainId,\n\t\tuid: attestationUid,\n\t});\n\n\tconst attestation = useMemo(() => {\n\t\tif (!data) {\n\t\t\treturn null;\n\t\t}\n\t\treturn asAttestationMeta(data?.data?.attestation);\n\t}, [isSuccess]);\n\n\treturn (\n\t\t<AttestationCardWithMeta\n\t\t\tisOffchain={isOffchain}\n\t\t\tchainId={chainId}\n\t\t\tattestation={attestation}\n\t\t/>\n\t);\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "hooks/eas_use-get-attestation-with-uid.tsx",
      "content": "import { type Attestation } from \"@geist/graphql/eas/graphql\";\nimport { type UseQueryResult, useQuery } from \"@tanstack/react-query\";\nimport { gql, rawRequest } from \"graphql-request\";\nimport { getEasscanEndpoint } from \"@/lib/eas_easscan\";\n\n// export type AttestationByIdResponse = {\n// \tattestation: {\n// \t\tid: string;\n// \t\ttxid: string;\n// \t\trecipient: string;\n// \t\tschema: {\n// \t\t\tindex: number;\n// \t\t\tschemaNames: {\n// \t\t\t\tname: string;\n// \t\t\t}[];\n// \t\t};\n// \t\ttime: string; // Assuming time is returned as a string (e.g., ISO 8601 format)\n// \t\tisOffchain: boolean;\n// \t\tschemaId: string;\n// \t\tattester: string;\n// \t} | null; // In case attestation can be null\n// };\n\nconst allAttestationsByQuery = gql`\n  query AttestationById($where: AttestationWhereUniqueInput!) {\n    attestation(where: $where) {\n      id\n      txid\n      recipient\n      schema {\n        index\n        schemaNames {\n          name\n        }\n      }\n      time\n      isOffchain\n      schemaId\n      attester\n    }\n  }\n`;\n\nexport type UseGetAttestationParams = {\n\tuid: string;\n\tchainId: number;\n};\n\nexport type UseGetAttestationsReturnType = UseQueryResult<Attestation, Error>;\n\nexport const createGetAttestationWithUidQueryOptions = ({\n\tuid,\n\tchainId,\n}: UseGetAttestationParams) => {\n\treturn {\n\t\tqueryKey: [\"attestation\", chainId, uid],\n\t\tqueryFn: async () =>\n\t\t\trawRequest(\n\t\t\t\t`${getEasscanEndpoint(chainId)}/graphql`,\n\t\t\t\tallAttestationsByQuery.toString(),\n\t\t\t\t{\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: uid,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t),\n\t};\n};\n\nexport const useGetAttestationWithUid = ({\n\tuid,\n\tchainId,\n}: UseGetAttestationParams): UseGetAttestationsReturnType => {\n\tconst queryOptions = createGetAttestationWithUidQueryOptions({\n\t\tuid,\n\t\tchainId,\n\t});\n\n\treturn useQuery(queryOptions);\n};\n",
      "type": "registry:hook"
    }
  ],
  "registryDependencies": [
    "https://ui.shadcn.com/r/styles/default/card.json",
    "https://ui.shadcn.com/r/styles/default/separator.json",
    "https://ui.shadcn.com/r/styles/default/skeleton.json",
    "https://ui.shadcn.com/r/styles/default/tooltip.json"
  ]
}