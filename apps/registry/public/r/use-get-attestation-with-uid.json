{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "use-get-attestation-with-uid",
	"type": "registry:hook",
	"files": [
		{
			"path": "hooks/eas/use-get-attestation-with-uid.tsx",
			"content": "import type { Attestation } from \"@geist/graphql/eas/graphql\";\nimport { type UseQueryResult, useQuery } from \"@tanstack/react-query\";\nimport { gql, rawRequest } from \"graphql-request\";\nimport { getEasscanEndpoint } from \"#lib/eas/easscan\";\n\n// export type AttestationByIdResponse = {\n// \tattestation: {\n// \t\tid: string;\n// \t\ttxid: string;\n// \t\trecipient: string;\n// \t\tschema: {\n// \t\t\tindex: number;\n// \t\t\tschemaNames: {\n// \t\t\t\tname: string;\n// \t\t\t}[];\n// \t\t};\n// \t\ttime: string; // Assuming time is returned as a string (e.g., ISO 8601 format)\n// \t\tisOffchain: boolean;\n// \t\tschemaId: string;\n// \t\tattester: string;\n// \t} | null; // In case attestation can be null\n// };\n\nconst allAttestationsByQuery = gql`\n  query AttestationById($where: AttestationWhereUniqueInput!) {\n    attestation(where: $where) {\n      id\n      txid\n      recipient\n      schema {\n        index\n        schemaNames {\n          name\n        }\n      }\n      time\n      isOffchain\n      schemaId\n      attester\n    }\n  }\n`;\n\nexport type UseGetAttestationParams = {\n\tuid: string;\n\tchainId: number;\n};\n\nexport type UseGetAttestationsReturnType = UseQueryResult<Attestation, Error>;\n\nexport const createGetAttestationWithUidQueryOptions = ({\n\tuid,\n\tchainId,\n}: UseGetAttestationParams) => {\n\treturn {\n\t\tqueryKey: [\"attestation\", chainId, uid],\n\t\tqueryFn: async () =>\n\t\t\trawRequest(\n\t\t\t\t`${getEasscanEndpoint(chainId)}/graphql`,\n\t\t\t\tallAttestationsByQuery.toString(),\n\t\t\t\t{\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: uid,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t),\n\t};\n};\n\nexport const useGetAttestationWithUid = ({\n\tuid,\n\tchainId,\n}: UseGetAttestationParams): UseGetAttestationsReturnType => {\n\tconst queryOptions = createGetAttestationWithUidQueryOptions({\n\t\tuid,\n\t\tchainId,\n\t});\n\n\treturn useQuery(queryOptions);\n};\n",
			"type": "registry:hook"
		}
	]
}
